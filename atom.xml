<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://www.tianfeifei.com</id>
    <title>非哥说</title>
    <updated>2019-06-16T04:21:38.129Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://www.tianfeifei.com"/>
    <link rel="self" href="http://www.tianfeifei.com/atom.xml"/>
    <subtitle>梦开始的地方</subtitle>
    <logo>http://www.tianfeifei.com/images/avatar.png</logo>
    <icon>http://www.tianfeifei.com/favicon.ico</icon>
    <rights>All rights reserved 2019, 非哥说</rights>
    <entry>
        <title type="html"><![CDATA[使用fir.im和钉钉进行测试包的发布与管理]]></title>
        <id>http://www.tianfeifei.com/post/20190524</id>
        <link href="http://www.tianfeifei.com/post/20190524">
        </link>
        <updated>2019-05-24T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>这一星期大部分时间都浪费在和国外同事沟通上了，最后发现是国外同事使用的测试包不一样~
无语死了，为避免重蹈覆辙，在项目组中对测试流程进行了优化和规范，以减少沟通成本。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这一星期大部分时间都浪费在和国外同事沟通上了，最后发现是国外同事使用的测试包不一样~
无语死了，为避免重蹈覆辙，在项目组中对测试流程进行了优化和规范，以减少沟通成本。</p>
 <!-- more --> 
<h1 id="firim简介">fir.im简介</h1>
<p><a href="https://fir.im/">fir.im</a>是一款强大的免费应用内测托管平台，可以进行应用内测。</p>
<h2 id="注册账号">注册账号</h2>
<p>打开<a href="https://account.fir.im/users/sign_up">注册页面</a>进行账号注册。</p>
<h2 id="登录账号">登录账号</h2>
<p>打开<a href="https://account.fir.im/signin">登录页面</a>进行账号登录。</p>
<h2 id="应用管理">应用管理</h2>
<p>打开<a href="https://fir.im/apps">应用管理页面</a>进行应用管理。</p>
<h1 id="使用firim">使用fir.im</h1>
<h2 id="在网页上使用firim">在网页上使用fir.im</h2>
<p>傻瓜式操作，暂不介绍。</p>
<h2 id="在android-studio中使用firim">在Android Studio中使用fir.im</h2>
<h3 id="下载安装firim-upload插件">下载安装【fir.im upload】插件</h3>
<p><img src="http://www.tianfeifei.com/post-images/1558691915156.png" alt="">
重启Android Studio。
插件会在Views -&gt; tool windows显示 FIR.im。
会在右边的侧栏显示功能按键
<img src="http://www.tianfeifei.com/post-images/1558692125168.png" alt=""></p>
<h3 id="功能页面">功能页面</h3>
<p><img src="http://www.tianfeifei.com/post-images/1558692393490.png" alt=""></p>
<h3 id="设置api_token">设置api_token</h3>
<p><img src="http://www.tianfeifei.com/post-images/1558692524092.png" alt="在这里查看API_TOKEN"></p>
<h3 id="上传测试apk">上传测试apk</h3>
<p>到这里就上传成功了。</p>
<h1 id="使用钉钉机器人告诉同事">使用钉钉机器人告诉同事</h1>
<h2 id="添加钉钉机器人">添加钉钉机器人</h2>
<h3 id="在群设置里选择添加群机器人">在群设置里选择添加群机器人</h3>
<p>选择自定义
<img src="http://www.tianfeifei.com/post-images/1558692848466.png" alt="">
复制webhook
<img src="http://www.tianfeifei.com/post-images/1558692919312.png" alt=""></p>
<h2 id="在firim中配置钉钉webhook">在fir.im中配置钉钉webhook</h2>
<h3 id="打开上传的应用详情页面">打开上传的应用详情页面</h3>
<p>选择【集成】模块
<img src="http://www.tianfeifei.com/post-images/1558693082334.png" alt=""></p>
<h3 id="配置钉钉消息推送">配置钉钉消息推送</h3>
<p><img src="http://www.tianfeifei.com/post-images/1558693213816.png" alt="">
把在钉钉上复制的webhook填写在webhook url
<img src="http://www.tianfeifei.com/post-images/1558693287509.png" alt="">
到这里就完成了！！</p>
<h1 id="效果">效果</h1>
<p>在Android Studio中使用fir.im插件上传测试包后，钉钉群里就会推送一条消息
<img src="http://www.tianfeifei.com/post-images/1558693420739.png" alt="">
这样你就不用再给相关人员发包了，他们也不会漏掉了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自己造轮子】发布远程依赖库之jitpack.io]]></title>
        <id>http://www.tianfeifei.com/post/20190513</id>
        <link href="http://www.tianfeifei.com/post/20190513">
        </link>
        <updated>2019-05-13T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>在gradle的加持下，使用第三方开源库的时候只需要在<code>build.gradle</code>中引用依赖就可以了。那我们想把自己写的库也按照这种便捷的方式让别人使用该怎么办呢？今天就为你揭晓答案！</p>
]]></summary>
        <content type="html"><![CDATA[<p>在gradle的加持下，使用第三方开源库的时候只需要在<code>build.gradle</code>中引用依赖就可以了。那我们想把自己写的库也按照这种便捷的方式让别人使用该怎么办呢？今天就为你揭晓答案！</p>
<!-- more --> 
<h1 id="想要的结果">想要的结果</h1>
<p>在Android Studio中使用<code>implementation 'com.github.ithomasoft:JsoupHelper:1.0.0'</code>就能使用我们自己的库。
格式就是 <strong>implementation 'com.github.GitHub昵称:开源库名称:版本号'</strong>。</p>
<h1 id="开始造轮子">开始造轮子</h1>
<h2 id="以开源库名称新建一个项目">以开源库名称新建一个项目。</h2>
<p>例如
<img src="http://www.tianfeifei.com/post-images/1557742011201.png" alt=""></p>
<h2 id="然后新建或者引入library">然后新建或者引入Library</h2>
<p>例如
<img src="http://www.tianfeifei.com/post-images/1557742157463.png" alt=""></p>
<h2 id="在根目录的buildgradle文件中加入插件">在根目录的build.gradle文件中加入插件</h2>
<pre><code>buildscript {
...
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
		classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
...
    }
</code></pre>
<p><a href="https://github.com/dcendents/android-maven-gradle-plugin">点击查看插件最新版</a></p>
<h2 id="在library的buildgradle中加入依赖">在Library的build.gradle中加入依赖</h2>
<pre><code>apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
group='com.github.ithomasoft'
</code></pre>
<blockquote>
<p>下面这一句是:group='com.github.你的github昵称'</p>
</blockquote>
<h2 id="将项目提交到github上">将项目提交到github上</h2>
<p><img src="http://www.tianfeifei.com/post-images/1557797004276.png" alt=""></p>
<h2 id="在github上对上传的项目创建一个releases版本">在github上对上传的项目创建一个releases版本</h2>
<p><img src="http://www.tianfeifei.com/post-images/1557797333602.png" alt=""></p>
<blockquote>
<p>注意，这里填写的就是引用依赖库时候的版本号，可以不加“v”</p>
</blockquote>
<p>到这里轮子就造好了</p>
<h1 id="装车">装车</h1>
<h2 id="打开jitpackio并使用github注册登录">打开<a href="https://jitpack.io">jitpack.io</a>，并使用Github注册登录。</h2>
<p><img src="http://www.tianfeifei.com/post-images/1557797634673.png" alt=""></p>
<blockquote>
<p>输入你的GitHub昵称/你开源库的名称,然后点Look up按钮。
<img src="http://www.tianfeifei.com/post-images/1557797809194.png" alt="">
当你看到有你创建的release，并且Log图标为绿时，说明创建成功。</p>
</blockquote>
<h1 id="开车">开车</h1>
<h2 id="在项目的buildgradle中添加jitpack的地址">在项目的build.gradle中添加JitPack的地址</h2>
<pre><code>allprojects {
		repositories {
			...
			maven { url 'https://jitpack.io' }
		}
	}
</code></pre>
<h2 id="在module的buildgradle中添加依赖">在module的build.gradle中添加依赖</h2>
<pre><code>dependencies {
	        implementation 'com.github.ithomasoft:jsouphelper:1.0.0'
	}
</code></pre>
<h2 id="同步项目">同步项目</h2>
<p>rebuild一下项目，就可以使用了
<img src="http://www.tianfeifei.com/post-images/1557798403769.png" alt=""></p>
<blockquote>
<p>可以看到我们已经引用成功。</p>
</blockquote>
<h1 id="注意事项">注意事项</h1>
<ul>
<li>在对依赖库进行迭代的时候，需要手动点击<strong>Get it</strong>！</li>
<li>Library的build.gradle中版本号尽量和你创建的版本号保持一致。</li>
<li>待续。。。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android常用开源控件合集【持续更新】]]></title>
        <id>http://www.tianfeifei.com/post/20190509</id>
        <link href="http://www.tianfeifei.com/post/20190509">
        </link>
        <updated>2019-05-08T22:06:06.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>Github</strong>是一个无穷的宝藏之地，里面有大量优秀的开源项目。这里收集了我从事Android开发工作以来使用到的优秀的开源项目，方便以后查找使用。</p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>Github</strong>是一个无穷的宝藏之地，里面有大量优秀的开源项目。这里收集了我从事Android开发工作以来使用到的优秀的开源项目，方便以后查找使用。</p>
<!-- more -->
<h1 id="ui">UI</h1>
<table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:center">作者</th>
<th style="text-align:right">简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/Tencent/QMUI_Android">QMUI_Android</a></td>
<td style="text-align:center">Tencent</td>
<td style="text-align:right">提高 Android UI 开发效率的 UI 库</td>
</tr>
<tr>
<td><a href="https://github.com/scwang90/SmartRefreshLayout">SmartRefreshLayout</a></td>
<td style="text-align:center">scwang90</td>
<td style="text-align:right">强大的刷新框架</td>
</tr>
<tr>
<td><a href="https://github.com/huangyanbin/smartTable">smartTable</a></td>
<td style="text-align:center">huangyanbin</td>
<td style="text-align:right">一款android自动生成表格框架</td>
</tr>
<tr>
<td><a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper">BaseRecyclerViewAdapterHelper</a></td>
<td style="text-align:center">CymChad</td>
<td style="text-align:right">强大的RecyclerView Adapter</td>
</tr>
<tr>
<td><a href="https://github.com/razerdp/BasePopup">BasePopup</a></td>
<td style="text-align:center">razerdp</td>
<td style="text-align:right">优秀的PopupWindow框架</td>
</tr>
<tr>
<td><a href="https://github.com/huanghaibin-dev/CalendarView">CalendarView</a></td>
<td style="text-align:center">huanghaibin-dev</td>
<td style="text-align:right">一个万能的日历控件</td>
</tr>
<tr>
<td><a href="https://github.com/HuanTanSheng/EasyPhotos">EasyPhotos</a></td>
<td style="text-align:center">HuanTanSheng</td>
<td style="text-align:right">一个图片选择框架</td>
</tr>
<tr>
<td><a href="https://github.com/bingoogolapple/BGAQRCode-Android">BGAQRCode-Android</a></td>
<td style="text-align:center">bingoogolapple</td>
<td style="text-align:right">扫码框架</td>
</tr>
<tr>
<td><a href="https://github.com/youth5201314/banner">banner</a></td>
<td style="text-align:center">youth5201314</td>
<td style="text-align:right">轮播图控件</td>
</tr>
<tr>
<td><a href="https://github.com/lipangit/JiaoZiVideoPlayer">JiaoZiVideoPlayer</a></td>
<td style="text-align:center">lipangit</td>
<td style="text-align:right">万能播放器</td>
</tr>
<tr>
<td><a href="https://github.com/airbnb/lottie-android">lottie-android</a></td>
<td style="text-align:center">airbnb</td>
<td style="text-align:right">动画框架</td>
</tr>
<tr>
<td><a href="https://github.com/Bigkoo/Android-PickerView">Android-PickerView</a></td>
<td style="text-align:center">Bigkoo</td>
<td style="text-align:right">时间选择器、省市区三级联动</td>
</tr>
<tr>
<td><a href="https://github.com/lygttpod/SuperTextView">SuperTextView</a></td>
<td style="text-align:center">lygttpod</td>
<td style="text-align:right">超级TextView</td>
</tr>
<tr>
<td><a href="https://github.com/PhilJay/MPAndroidChart">MPAndroidChart </a></td>
<td style="text-align:center">PhilJay</td>
<td style="text-align:right">超级图表</td>
</tr>
<tr>
<td>---</td>
<td style="text-align:center">---</td>
<td style="text-align:right">---</td>
</tr>
</tbody>
</table>
<h1 id="工具类">工具类</h1>
<table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:center">作者</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/Blankj/AndroidUtilCode">AndroidUtilCode</a></td>
<td style="text-align:center">Blankj</td>
<td>常用工具类集合</td>
</tr>
<tr>
<td><a href="https://github.com/yanzhenjie/Kalle">Kalle</a></td>
<td style="text-align:center">yanzhenjie</td>
<td>逻辑清晰的网络请求框架</td>
</tr>
<tr>
<td><a href="https://github.com/didi/DoraemonKit">DoraemonKit</a></td>
<td style="text-align:center">didi</td>
<td>一款功能齐全的Android研发助手</td>
</tr>
<tr>
<td><a href="https://github.com/LitePalFramework/LitePal">LitePal</a></td>
<td style="text-align:center">LitePalFramework</td>
<td>数据库操作框架</td>
</tr>
<tr>
<td><a href="https://github.com/luckybilly/Gloading">Gloading </a></td>
<td style="text-align:center">luckybilly</td>
<td>深度解耦Android全局加载中、加载失败及空数据视图</td>
</tr>
<tr>
<td><a href="https://github.com/Curzibn/Luban">Luban</a></td>
<td style="text-align:center">Curzibn</td>
<td>最接近微信朋友圈的图片压缩算法</td>
</tr>
<tr>
<td><a href="https://github.com/alibaba/fastjson">fastjson</a></td>
<td style="text-align:center">alibaba</td>
<td>最快的json解析器</td>
</tr>
<tr>
<td><a href="https://github.com/alibaba/ARouter">ARouter</a></td>
<td style="text-align:center">alibaba</td>
<td>组件化路由框架</td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/butterknife">butterknife</a></td>
<td style="text-align:center">JakeWharton</td>
<td>注解框架</td>
</tr>
<tr>
<td><a href="https://github.com/greenrobot/EventBus">EventBus</a></td>
<td style="text-align:center">greenrobot</td>
<td>事件总线框架</td>
</tr>
<tr>
<td>---</td>
<td style="text-align:center">---</td>
<td>---</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android开发错误集合]]></title>
        <id>http://www.tianfeifei.com/post/20190508</id>
        <link href="http://www.tianfeifei.com/post/20190508">
        </link>
        <updated>2019-05-08T07:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>本篇收录日常Android开发中遇到的问题以及解决思路。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本篇收录日常Android开发中遇到的问题以及解决思路。</p>
<!-- more --> 
<ol>
<li>Android studio Program type already present: <code>com.****.BuildConfig</code>【2019-05-08】</li>
</ol>
<blockquote>
<p><strong>【错误原因】</strong> Android studio 抛错，是因为有2个module在 AndroidManifest.xml 里面具有一样的package name。
<strong>【解决方案】</strong> 将module中的AndroidManifest.xml中的packagename修改成不同名字即可。</p>
</blockquote>
<p>2.在lib-module中使用ButterKnife需要使用R2。不能使用switch 来判断resId，必须使用if-else来进行判断。
2. 待续。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[架构设计(一)]]></title>
        <id>http://www.tianfeifei.com/post/20190507</id>
        <link href="http://www.tianfeifei.com/post/20190507">
        </link>
        <updated>2019-05-07T12:30:30.000Z</updated>
        <summary type="html"><![CDATA[<p>优秀的APP诞生，除了引人入胜的交互效果和业务逻辑，还有来自开发的鼎力支持。就像建造房子一样，拥有了优秀的设计图纸，还需要开发商对图纸进行实现。</p>
]]></summary>
        <content type="html"><![CDATA[<p>优秀的APP诞生，除了引人入胜的交互效果和业务逻辑，还有来自开发的鼎力支持。就像建造房子一样，拥有了优秀的设计图纸，还需要开发商对图纸进行实现。</p>
<!-- more -->
<h1 id="序言">序言</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[APP国际化(多语言)]]></title>
        <id>http://www.tianfeifei.com/post/20190506</id>
        <link href="http://www.tianfeifei.com/post/20190506">
        </link>
        <updated>2019-05-06T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>最近做的app要求有中文模式和英文模式，并且可以在app内进行语言的切换。
其实这就是我们说的国际化适配了，也叫多语言适配。
下面我们就从实际项目中去了解一下多语言适配以及动态切换。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近做的app要求有中文模式和英文模式，并且可以在app内进行语言的切换。
其实这就是我们说的国际化适配了，也叫多语言适配。
下面我们就从实际项目中去了解一下多语言适配以及动态切换。</p>
<!-- more -->
<h1 id="多语言适配">多语言适配</h1>
<h2 id="创建资源文件">创建资源文件</h2>
<p>目前来说，Android应用大部分都是默认读取手机的当前语言环境，然后获取相应的语言资源strings。
那么我们只需要创建对应的strings就算完成了多语言适配的基础工作。
<img src="http://www.tianfeifei.com/post-images/1557114950464.png" alt="项目中的结构"></p>
<h2 id="代码中应用">代码中应用</h2>
<ul>
<li>在xml布局文件中，我们需要使用 <code>@string/xxxx</code> 去引用文字资源。</li>
<li>在java文件中，我们需要使用 <code>getString(R.string.xxxx)</code> 去引用文字资源。</li>
</ul>
<h1 id="动态切换">动态切换</h1>
<h2 id="切换英文">切换英文</h2>
<pre><code>Resources resources = getResources();// 获得res资源对象
Configuration config = resources.getConfiguration();// 获得设置对象
DisplayMetrics dm = resources.getDisplayMetrics();// 获得屏幕参数：主要是分辨率，像素等。
config.locale = Locale.ENGLISH; // 英文
resources.updateConfiguration(config, dm);
</code></pre>
<h2 id="切换中文">切换中文</h2>
<pre><code>Resources resources = getResources();// 获得res资源对象
Configuration config = resources.getConfiguration();// 获得设置对象
DisplayMetrics dm = resources.getDisplayMetrics();// 获得屏幕参数：主要是分辨率，像素等。
config.locale = Locale.SIMPLIFIED_CHINESE; // 简体中文
resources.updateConfiguration(config, dm);
</code></pre>
<h2 id="跟随系统">跟随系统</h2>
<pre><code>Resources resources = getResources();// 获得res资源对象
Configuration config = resources.getConfiguration();// 获得设置对象
DisplayMetrics dm = resources.getDisplayMetrics();// 获得屏幕参数：主要是分辨率，像素等。
config.locale = Locale.getDefault(); // 跟随系统
resources.updateConfiguration(config, dm);
</code></pre>
<p>可以看到，我们需要获取到res资源对象和设置对象，然后去设置locale并更新res资源的设置，就完成语言的切换。</p>
<h1 id="项目中遇到的问题">项目中遇到的问题</h1>
<h2 id="开发层面">开发层面</h2>
<ul>
<li>Toast中直接使用 <code>resId</code>  会导致显示默认的文字资源。</li>
</ul>
<blockquote>
<p>【解决方案】 使用 <code>getString(resId)</code> 来获取文字资源。</p>
</blockquote>
<ul>
<li>更改语言配置需要在 <code>setContentView()</code> 之前调用才能生效。</li>
<li>一般切换语言是在设置页面里，切换语言后不会立即生效。</li>
</ul>
<blockquote>
<p>【解决方案】切换完语言后重启首页。</p>
</blockquote>
<ul>
<li>资源根据页面和用途区分。</li>
</ul>
<blockquote>
<p>【解决方案】根据页面和用途增加前缀。</p>
</blockquote>
<ul>
<li>使用第三方控件的时候注意多语言的适配。</li>
<li>待续。。。</li>
</ul>
<h2 id="ui层面">UI层面</h2>
<ul>
<li>由于项目中效果图是按照中文去设计的，切换语言后会有部分文字内容变长，导致页面布局错乱、部分内容丢失。</li>
</ul>
<blockquote>
<p>【解决方案】1、使用 <code>wrap_content</code> 来约束而不是直接写死宽高。 2、使用滑动布局来展示被顶出页面的内容。 3、美工设计页面的时候合理一点。</p>
</blockquote>
<ul>
<li>待续。。。</li>
</ul>
<h2 id="业务层面">业务层面</h2>
<ul>
<li>部分中国特色的应用在国外使用不了，比如身份证识别等。</li>
</ul>
<blockquote>
<p>【解决方案】根据当前语言动态切换页面，来完成某些业务需要的功能。</p>
</blockquote>
<ul>
<li>待续。。。</li>
</ul>
<h2 id="细节层面">细节层面</h2>
<ul>
<li>首次打开app的时候应该根据当前系统的语言来展示文字资源，而不是展示默认文字资源。（一般来说会在本地保存一个值来记录当前语言环境）</li>
<li>在切换语言页面 一些文字资源需要单独配置（在任何语言环境下都是一样的）</li>
<li>与服务器交互的时候需要告诉服务器当前语言环境。</li>
<li>注意国内外的使用习惯差异。</li>
<li>待续。。。</li>
</ul>
<h1 id="总结">总结</h1>
<p>多语言适配从开发角度来说比较简单，没有什么难度。
一个高质量的出海产品不是简单的切换语言，还需要多方面共同协作才能完成。</p>
]]></content>
    </entry>
</feed>